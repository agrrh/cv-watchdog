#!/usr/bin/env python3

import os
import sys
import yaml
import requests
import time


DATA_DEFAULT = {'tags': {}, 'src': {}}
FPATH = './data.yml'

def data_save(data):
    with open(FPATH, 'w+') as fp:
        data = yaml.dump(data, default_flow_style=False)
        fp.write(data)
        fp.close()
    return True

def data_load():
    if not os.path.isfile(FPATH):
        data_save(DATA_DEFAULT)
        result = DATA_DEFAULT
    else:
        with open(FPATH, 'r') as fp:
            result = yaml.load(fp)
            fp.close()
    return result

# https://stackoverflow.com/a/1476006
def follow(fpath):
    fp = open(fpath)
    fp.seek(0,2)      # Go to the end of the file
    while True:
         line = fp.readline()
         if not line:
             time.sleep(0.1)    # Sleep briefly
             continue
         yield line

def parse_log_line(line):
    ip = line.split(' ')[0]
    tag = line.split(' ')[6].split('?')[1] if '?' in line else 'unknown'

    return {'ip': ip, 'tag': tag, 'line': line}

def notify(tg_token, tg_chat_id, message_dict, src_count, tag_count):
    message_dict['src_count'] = src_count
    message_dict['tag_count'] = tag_count
    message = 'New visit from [{ip}](https://www.reg.ru/whois/?dname={ip}) ({src_count}) with *{tag}* ({tag_count}) tag.\n\n`{line}`'.format(**message_dict)
    uri = 'https://api.telegram.org/bot' + tg_token + '/sendMessage'
    data = {
        'chat_id': tg_chat_id,
        'text': message,
        'parse_mode': 'Markdown',
        'disable_web_page_preview': True
    }
    res = requests.post(uri, data=data)
    return res

if __name__ == '__main__':
    try:
        log_path = os.environ['CV_WATCHDOG_LOG_PATH']
        uri_path = os.environ['CV_WATCHDOG_URI_PATH']
        ignore_list = os.environ['CV_WATCHDOG_IGNORE'] if 'CV_WATCHDOG_IGNORE' in os.environ else None
        tg_token = os.environ['CV_WATCHDOG_TG_TOKEN']
        tg_chat_id = os.environ['CV_WATCHDOG_TG_CHAT_ID']
    except KeyError as e:
        print('Could not proceed w/o required params, specify env var: {}'.format(e))
        sys.exit(1)

    print('args: {}; {}; {}; {}; {}'.format(log_path, uri_path, ignore_list, tg_token, tg_chat_id))

    print('Starting tail -f ...')
    tail = follow(log_path)
    data = data_load()

    for line in tail:
        if uri_path in line:
            print(line.strip())

            show = True
            for ignore in ignore_list.split(','):
                if ignore in line:
                    show = False
                    continue
            if show:
                print('notify')
                message_dict = parse_log_line(line)
                if message_dict['tag'] != 'unknown':
                    if message_dict['tag'] not in data['tags']:
                        data['tags'] = 0
                    else:
                        data['tags'] += 1
                if message_dict['ip'] not in data['src']:
                    data['src'] = 0
                else:
                    data['src'] += 1
                data_save(data)
                notify(tg_token, tg_chat_id, message_dict, src_count=data['src'], tag_count=data['tag'])
            else:
                print('ignored: {}'.format(ignore_list))
